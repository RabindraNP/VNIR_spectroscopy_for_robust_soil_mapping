[
["spatial-modeling.html", "Chapter 9 Spatial modeling 9.1 Robust fitting of the spatial models 9.2 Accounting for vis-NIR model errors in the spatial models 9.3 Validation of the spatial models 9.4 Mapping", " Chapter 9 Spatial modeling In case you have previosly saved both, the vis-NIR augmented data set and the table of the variance of the residuals into your working directory, and you do not have these data in your R enviroment you can execute the code below: ## vniraugmented.txt is spuppposed to be saved in your working directory vniraugmented &lt;- read.table(file = &quot;vniraugmented.txt&quot;, header = TRUE, sep = &quot;\\t&quot;) If you have saved the table of the variance of the residuals into your working directory you can execute the code below: ## vnir_residual_variances.txt is spuppposed to be saved in your working directory residualvariances &lt;- read.table(file = &quot;vnir_residual_variances.txt&quot;, header = TRUE, sep = &quot;\\t&quot;) Alternatively, you can clean your R enviroment and leave only the data that will be used for the spatial analyses: ## necessary objects reqobjects2 &lt;- c(&quot;vniraugmented&quot;, &quot;residualvariances&quot;) ## objects to be removed o2rm2 &lt;- ls()[!ls() %in% reqobjects2] ## remove the objects rm(list = o2rm2) Split the data and organize it by layers and spatial fit and validation sets vniraugmented &lt;- as_tibble(vniraugmented) ## split the data sets by layer and by spatial fit and spatial validation fitlayera &lt;- vniraugmented %&gt;% filter(layer == &quot;A&quot;, set != &quot;validation&quot;) fitlayerb &lt;- vniraugmented %&gt;% filter(layer == &quot;B&quot;, set != &quot;validation&quot;) vallayera &lt;- vniraugmented %&gt;% filter(layer == &quot;A&quot;, set == &quot;validation&quot;) vallayerb &lt;- vniraugmented %&gt;% filter(layer == &quot;B&quot;, set == &quot;validation&quot;) plot(vallayera$POINT_X, vallayera$POINT_Y, xlab = &quot;X&quot;, ylab = &quot;Y&quot;) points(fitlayera$POINT_X, fitlayera$POINT_Y, col = &quot;red&quot;, cex = 1.5) 9.1 Robust fitting of the spatial models Specify some basic aspects/parameters required for fitting the spatial models… ## Define a lag distance for the estimation of the variagram lagdist &lt;- seq(0, 1500, by = 100) ## Choose the variogram model varmodel &lt;- &quot;RMexp&quot; ## Define what parameters need to be adjusted to fit the geo model fitparam &lt;- default.fit.param(scale = FALSE, alpha = TRUE, variance = FALSE) ## A tuning constant for the robust REML algorithm ## for the spatial models (see tuniing.psi parameter ## of the georob function) tpsi &lt;- 2000 ## Control some aspects of the spatial predictions gcntrl &lt;- control.predict.georob(extended.output = TRUE, full.covmat = TRUE) Define the tables where the fitted variogram parameters will be stored ## The variables for which a spatial model will be fitted gprops &lt;- c(&quot;Ca&quot;, &quot;alr_Clay&quot;, &quot;alr_Silt&quot;, &quot;Ca_spec&quot;, &quot;alr_Clay_spec&quot;, &quot;alr_Silt_spec&quot;) ## names of the variogram parameters varparamames &lt;- c(&quot;variance&quot;, &quot;snugget&quot;, &quot;nugget&quot;, &quot;scale&quot;) ## Create the table variogtablea &lt;- data.frame(properties = gprops, data = rep(c(&quot;Laboratory&quot;, &quot;vis-NIR augmented&quot;), each = length(gprops) / 2), variance = NA, snugget = NA, nugget = NA, scale = NA) variogtableb &lt;- variogtablea 9.1.1 Laboratory-based data Here we fit the spatial models of the soil properties whose values comes from conventional laboratory analyes only… 9.1.1.1 Layer A Exchangeable Ca2+… ## Check the sample variogram vario_Ca_lab_a &lt;- sample.variogram(object = fitlayera$Ca, locations = fitlayera[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_Ca_lab_a$lag.dist, y = vario_Ca_lab_a$gamma, ylim = c(0, max(vario_Ca_lab_a$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;Ca, laboratory - Layer A&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_Ca_lab_a &lt;- c(variance = 135, nugget = 10, scale = 920) ## Fit Ca_lab_a &lt;- georob(Ca ~ 1, data = fitlayera, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_Ca_lab_a, fit.param = fitparam, tuning.psi = tpsi) summary(Ca_lab_a) ## Store the variogram parameters variogtablea[variogtablea$properties == &quot;Ca&quot;, varparamames] &lt;- Ca_lab_a$variogram.object[[1]]$param[varparamames] \\(alr(clay)\\) ## Check the sample variogram vario_alr_Clay_lab_a &lt;- sample.variogram(object = fitlayera$alr_Clay, locations = fitlayera[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_alr_Clay_lab_a$lag.dist, y = vario_alr_Clay_lab_a$gamma, ylim = c(0, max(vario_alr_Clay_lab_a$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;alr(clay) laboratory - Layer A&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_alr_Clay_lab_a &lt;- c(variance = 0.8, nugget = 0.3, scale = 1220) ## Fit alr_Clay_lab_a &lt;- georob(alr_Clay ~ 1, data = fitlayera, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_alr_Clay_lab_a, fit.param = fitparam, tuning.psi = tpsi) summary(alr_Clay_lab_a) ## Store the variogram parameters variogtablea[variogtablea$properties == &quot;alr_Clay&quot;, varparamames] &lt;- alr_Clay_lab_a$variogram.object[[1]]$param[varparamames] \\(alr(silt)\\) ## Check the sample variogram vario_alr_Silt_lab_a &lt;- sample.variogram(object = fitlayera$alr_Silt, locations = fitlayera[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_alr_Silt_lab_a$lag.dist, y = vario_alr_Silt_lab_a$gamma, ylim = c(0, max(vario_alr_Silt_lab_a$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;alr(silt) laboratory - Layer A&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_alr_Silt_lab_a &lt;- c(variance = 1.31, nugget = 0.3, scale = 812) ## Fit alr_Silt_lab_a &lt;- georob(alr_Silt ~ 1, data = fitlayera, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_alr_Silt_lab_a, fit.param = fitparam, tuning.psi = tpsi) summary(alr_Silt_lab_a) ## Store the variogram parameters variogtablea[variogtablea$properties == &quot;alr_Silt&quot;, varparamames] &lt;- alr_Silt_lab_a$variogram.object[[1]]$param[varparamames] 9.1.1.2 Layer B Exchangeable Ca2+… ## Check the sample variogram vario_Ca_lab_b &lt;- sample.variogram(object = fitlayerb$Ca, locations = fitlayerb[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_Ca_lab_b$lag.dist, y = vario_Ca_lab_b$gamma, ylim = c(0, max(vario_Ca_lab_b$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;Ca, laboratory - Layer B&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_Ca_lab_b &lt;- c(variance = 127, nugget = 0.1, scale = 850) ## Fit Ca_lab_b &lt;- georob(Ca ~ 1, data = fitlayerb, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_Ca_lab_b, fit.param = fitparam, tuning.psi = tpsi) summary(Ca_lab_b) ## Store the variogram parameters variogtableb[variogtableb$properties == &quot;Ca&quot;, varparamames] &lt;- Ca_lab_b$variogram.object[[1]]$param[varparamames] \\(alr(clay)\\) ## Check the sample variogram vario_alr_Clay_lab_b &lt;- sample.variogram(object = fitlayerb$alr_Clay, locations = fitlayerb[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_alr_Clay_lab_b$lag.dist, y = vario_alr_Clay_lab_b$gamma, ylim = c(0, max(vario_alr_Clay_lab_b$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;alr(clay) laboratory - Layer B&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_alr_Clay_lab_b &lt;- c(variance = 1.17, nugget = 0.1, scale = 973, alpha = 0.69) ## Fit alr_Clay_lab_b &lt;- georob(alr_Clay ~ 1, data = fitlayerb, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_alr_Clay_lab_b, fit.param = fitparam, tuning.psi = tpsi) summary(alr_Clay_lab_b) ## Store the variogram parameters variogtableb[variogtableb$properties == &quot;alr_Clay&quot;, varparamames] &lt;- alr_Clay_lab_b$variogram.object[[1]]$param[varparamames] \\(alr(silt)\\) ## Check the sample variogram vario_alr_Silt_lab_b &lt;- sample.variogram(object = fitlayerb$alr_Silt, locations = fitlayerb[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_alr_Silt_lab_b$lag.dist, y = vario_alr_Silt_lab_b$gamma, ylim = c(0, max(vario_alr_Silt_lab_b$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;alr(silt) laboratory - Layer B&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_alr_Silt_lab_b &lt;- c(variance = 1.1, nugget = 0.2, scale = 423) ## Fit alr_Silt_lab_b &lt;- georob(alr_Silt ~ 1, data = fitlayerb, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_alr_Silt_lab_b, fit.param = fitparam, tuning.psi = tpsi) summary(alr_Silt_lab_b) ## Store the variogram parameters variogtableb[variogtableb$properties == &quot;alr_Silt&quot;, varparamames] &lt;- alr_Silt_lab_b$variogram.object[[1]]$param[varparamames] 9.1.2 Augmented vis-NIR data Here we fit the spatial models of the soil properties whose values come from the vis-NIR augmented data… 9.1.2.1 Layer A Exchangeable Ca2+ (vis-NIR augmented) … # Check the sample variogram vario_Ca_spec_a &lt;- sample.variogram(object = fitlayera$Ca_spec, locations = fitlayera[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_Ca_spec_a$lag.dist, y = vario_Ca_spec_a$gamma, ylim = c(0, max(vario_Ca_spec_a$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;Ca, vis-NIR augmented - Layer A&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_Ca_spec_a &lt;- c(variance = 112, nugget = 1, scale = 1023) ## Fit Ca_spec_a &lt;- georob(Ca ~ 1, data = fitlayera, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_Ca_spec_a, fit.param = fitparam, tuning.psi = tpsi) summary(Ca_spec_a) ## Store the variogram parameters variogtablea[variogtablea$properties == &quot;Ca_spec&quot;, varparamames] &lt;- Ca_spec_a$variogram.object[[1]]$param[varparamames] \\(alr(clay)\\) (vis-NIR augmented) ## Check the sample variogram vario_alr_Clay_spec_a &lt;- sample.variogram(object = fitlayera$alr_Clay_spec, locations = fitlayera[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_alr_Clay_spec_a$lag.dist, y = vario_alr_Clay_spec_a$gamma, ylim = c(0, max(vario_alr_Clay_spec_a$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;alr(clay) vis-NIR augmented - Layer A&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_alr_Clay_spec_a &lt;- c(variance = 1.134, nugget = 0.1, scale = 955) ## Fit alr_Clay_spec_a &lt;- georob(alr_Clay_spec ~ 1, data = fitlayera, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_alr_Clay_spec_a, fit.param = fitparam, tuning.psi = tpsi) summary(alr_Clay_spec_a) ## Store the variogram parameters variogtablea[variogtablea$properties == &quot;alr_Clay_spec&quot;, varparamames] &lt;- alr_Clay_spec_a$variogram.object[[1]]$param[varparamames] \\(alr(silt)\\) (vis-NIR augmented) ## Check the sample variogram vario_alr_Silt_spec_a &lt;- sample.variogram(object = fitlayera$alr_Silt_spec, locations = fitlayera[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_alr_Silt_spec_a$lag.dist, y = vario_alr_Silt_spec_a$gamma, ylim = c(0, max(vario_alr_Silt_spec_a$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;alr(silt) vis-NIR augmented - Layer A&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_alr_Silt_spec_a &lt;- c(variance = 0.845, nugget = 0.1, scale = 1282) ## Fit alr_Silt_spec_a &lt;- georob(alr_Silt_spec ~ 1, data = fitlayera, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_alr_Silt_spec_a, fit.param = fitparam, tuning.psi = tpsi) summary(alr_Silt_spec_a) ## Store the variogram parameters variogtablea[variogtablea$properties == &quot;alr_Silt_spec&quot;, varparamames] &lt;- alr_Silt_spec_a$variogram.object[[1]]$param[varparamames] 9.1.2.2 Layer B Exchangeable Ca2+ (vis-NIR augmented) … ## Check the sample variogram vario_Ca_spec_b &lt;- sample.variogram(object = fitlayerb$Ca_spec, locations = fitlayerb[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_Ca_spec_b$lag.dist, y = vario_Ca_spec_b$gamma, ylim = c(0, max(vario_Ca_spec_b$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;Ca, vis-NIR augmented - Layer B&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_Ca_spec_b &lt;- c(variance = 142, nugget = 0.1, scale = 1025) ## Fit Ca_spec_b &lt;- georob(Ca ~ 1, data = fitlayerb, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_Ca_spec_b, fit.param = fitparam, tuning.psi = tpsi) summary(Ca_spec_b) ## Store the variogram parameters variogtableb[variogtableb$properties == &quot;Ca_spec&quot;, varparamames] &lt;- Ca_spec_b$variogram.object[[1]]$param[varparamames] \\(alr(clay)\\) (vis-NIR augmented) ## Check the sample variogram vario_alr_Clay_spec_b &lt;- sample.variogram(object = fitlayerb$alr_Clay_spec, locations = fitlayerb[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_alr_Clay_spec_b$lag.dist, y = vario_alr_Clay_spec_b$gamma, ylim = c(0, max(vario_alr_Clay_spec_b$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;alr(clay) vis-NIR augmented - Layer B&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_alr_Clay_spec_b &lt;- c(variance = 1.21, nugget = 0.1, scale = 1000, alpha = 0.68) ## Fit alr_Clay_spec_b &lt;- georob(alr_Clay_spec ~ 1, data = fitlayerb, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_alr_Clay_spec_b, fit.param = fitparam, tuning.psi = tpsi) summary(alr_Clay_spec_b) ## Store the variogram parameters variogtableb[variogtableb$properties == &quot;alr_Clay_spec&quot;, varparamames] &lt;- alr_Clay_spec_b$variogram.object[[1]]$param[varparamames] \\(alr(silt)\\) (vis-NIR augmented) ## Check the sample variogram vario_alr_Silt_spec_b &lt;- sample.variogram(object = fitlayerb$alr_Silt_spec, locations = fitlayerb[,c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;)], lag.dist.def = lagdist, estimator = &quot;matheron&quot;) ## Plot the sample variogram plot(x = vario_alr_Silt_spec_b$lag.dist, y = vario_alr_Silt_spec_b$gamma, ylim = c(0, max(vario_alr_Silt_spec_b$gamma)), xlab = &quot;lag distance&quot;, ylab = &quot;gamma&quot;, pch = 16, col = &quot;red&quot;, main = &quot;alr(silt) vis-NIR augmented - Layer B&quot;) grid() ## Check the plot above to select some starting values of the ## variogram parameters startp_alr_Silt_spec_b &lt;- c(variance = 1.43, nugget = 0.1, scale = 850, alpha = 0.63) ## Fit alr_Silt_spec_b &lt;- georob(alr_Silt_spec ~ 1, data = fitlayerb, locations = ~ POINT_X + POINT_Y, variogram.model = varmodel, param = startp_alr_Silt_spec_b, fit.param = fitparam, tuning.psi = tpsi) summary(alr_Silt_spec_b) ## Store the variogram parameters variogtableb[variogtableb$properties == &quot;alr_Silt_spec&quot;, varparamames] &lt;- alr_Silt_spec_b$variogram.object[[1]]$param[varparamames] 9.2 Accounting for vis-NIR model errors in the spatial models Our vis-NIR models (used to create the vis-NIR augmented data) have an error which we estimated in previous sections and which is stored in the residualvariances object. The uncertainty of these models was propagated through spatial predictions in order to obtain more realistic performance results of the spatial predictions. We followed the approach given in Viscarra Rossel et al. (2016b) where the variance of the residuals of the vis-NIR predictions at each layer is used for propagating the vis-NIR erros (see section Spectroscopicmodel error in our paper). For the vis-NIR augmented data we assume that the uncertainty of the whole set is given by the variances of the predictions. However, this dataset contains both, laboratory data (aprox. 26%) and vis-NIR predicted data (aprox. 74%), therefore the variance we assume here is expected to be larger than the actual one in the augmented data. You can try to account for this. ## Add the residual variances to the snugget parameter ## of the variograms corresponding to the vis-NIR augmented ## data ## Note that snugget was 0 for all the fitted variograms ## Ca (layer A) variogtablea$snugget[variogtablea$properties == &quot;Ca_spec&quot;] &lt;- residualvariances$layerA[residualvariances$Property == &quot;Ca&quot;] ## alr(clay) (layer A) variogtablea$snugget[variogtablea$properties == &quot;alr_Clay_spec&quot;] &lt;- residualvariances$layerA[residualvariances$Property == &quot;alr_Clay&quot;] ## alr(silt) (layer A) variogtablea$snugget[variogtablea$properties == &quot;alr_Silt_spec&quot;] &lt;- residualvariances$layerA[residualvariances$Property == &quot;alr_Silt&quot;] ## Ca (layer B) variogtableb$snugget[variogtableb$properties == &quot;Ca_spec&quot;] &lt;- residualvariances$layerB[residualvariances$Property == &quot;Ca&quot;] ## alr(clay) (layer B) variogtableb$snugget[variogtableb$properties == &quot;alr_Clay_spec&quot;] &lt;- residualvariances$layerB[residualvariances$Property == &quot;alr_Clay&quot;] ## alr(silt) (layer B) variogtableb$snugget[variogtableb$properties == &quot;alr_Silt_spec&quot;] &lt;- residualvariances$layerB[residualvariances$Property == &quot;alr_Silt&quot;] 9.3 Validation of the spatial models Create a data.frame for each layer to store the predictions in the validation set and another two to store the validation results… ## The final variables to be predicted. In the case of ## Clay, silt and Sand they are estimated from the ## predictions of alr(clay) and alr(silt) bprops &lt;- c(&quot;Ca&quot;, &quot;Clay&quot;, &quot;Silt&quot;, &quot;Sand&quot;, &quot;Ca_spec&quot;, &quot;Clay_spec&quot;, &quot;Silt_spec&quot;, &quot;Sand_spec&quot;) ## a quick function to create columns of a given length (lg) idfcol &lt;- function(x, lg){ data.frame(lg, fix.empty.names = FALSE) } ## object where the spatial predictions will be stored sppredsvala &lt;- sapply(c(&quot;ID&quot;, bprops), FUN = idfcol, lg = rep(NA, nrow(vallayera))) sppredsvala &lt;- data.frame(do.call(&quot;cbind&quot;, sppredsvala)) sppredsvala$ID &lt;- vallayera$ID sppredsvalb &lt;- sapply(c(&quot;ID&quot;, bprops), FUN = idfcol, lg = rep(NA, nrow(vallayerb))) sppredsvalb &lt;- data.frame(do.call(&quot;cbind&quot;, sppredsvalb)) sppredsvalb$ID &lt;- vallayerb$ID ## object where the validation of the spatial predictions will be stored spvala &lt;- data.frame(properties = bprops, data = rep(c(&quot;Laboratory&quot;, &quot;vis-NIR augmented&quot;), each = length(bprops) / 2), R2 = NA, RMSE = NA, ME = NA) spvalb &lt;- spvala 9.3.1 Laboratory-based data 9.3.1.1 Layer A Exchangeable Ca2+… pred_Ca_lab_a &lt;- predict(Ca_lab_a, newdata = as.data.frame(vallayera), control = gcntrl) sppredsvala$Ca &lt;- pred_Ca_lab_a$pred$pred spvala$R2[spvala$properties == &quot;Ca&quot;] &lt;- cor(vallayera$Ca, sppredsvala$Ca)^2 spvala$RMSE[spvala$properties == &quot;Ca&quot;] &lt;- mean((vallayera$Ca - sppredsvala$Ca)^2)^0.5 spvala$ME[spvala$properties == &quot;Ca&quot;] &lt;- mean(vallayera$Ca - sppredsvala$Ca) Estimation of clay, silt and sand contents from the predictions of \\(alr(clay)\\) and \\(alr(silt)\\)… ## predict alr(clay) pred_alr_Clay_lab_a &lt;- predict(alr_Clay_lab_a, newdata = as.data.frame(vallayera), control = gcntrl) ## predict alr(silt) pred_alr_Silt_lab_a &lt;- predict(alr_Silt_lab_a, newdata = as.data.frame(vallayera), control = gcntrl) ## Back-transfrom to clay, silt and sand contents dvr.Silt &lt;- exp(pred_alr_Silt_lab_a$pred$pred + (0.5 * (pred_alr_Silt_lab_a$pred$var.target - pred_alr_Silt_lab_a$pred$cov.pred.target))) dvr.Clay &lt;- exp(pred_alr_Clay_lab_a$pred$pred + (0.5 * (pred_alr_Clay_lab_a$pred$var.target - pred_alr_Clay_lab_a$pred$cov.pred.target))) dvn.pred &lt;- 1 + dvr.Silt + dvr.Clay ## Store the back-transformed values sppredsvala$Clay &lt;- 100 * (dvr.Clay/dvn.pred) sppredsvala$Silt &lt;- 100 * (dvr.Silt/dvn.pred) sppredsvala$Sand &lt;- 100/dvn.pred ## Estimate the validation parameters for ## Clay spvala$R2[spvala$properties == &quot;Clay&quot;] &lt;- cor(vallayera$Clay, sppredsvala$Clay)^2 spvala$RMSE[spvala$properties == &quot;Clay&quot;] &lt;- mean((vallayera$Clay - sppredsvala$Clay)^2)^0.5 spvala$ME[spvala$properties == &quot;Clay&quot;] &lt;- mean(vallayera$Clay - sppredsvala$Clay) ## Silt spvala$R2[spvala$properties == &quot;Silt&quot;] &lt;- cor(vallayera$Silt, sppredsvala$Silt)^2 spvala$RMSE[spvala$properties == &quot;Silt&quot;] &lt;- mean((vallayera$Silt - sppredsvala$Silt)^2)^0.5 spvala$ME[spvala$properties == &quot;Silt&quot;] &lt;- mean(vallayera$Silt - sppredsvala$Silt) ## Sand spvala$R2[spvala$properties == &quot;Sand&quot;] &lt;- cor(vallayera$Sand, sppredsvala$Sand)^2 spvala$RMSE[spvala$properties == &quot;Sand&quot;] &lt;- mean((vallayera$Sand - sppredsvala$Sand)^2)^0.5 spvala$ME[spvala$properties == &quot;Sand&quot;] &lt;- mean(vallayera$Sand - sppredsvala$Sand) 9.3.1.2 Layer B Exchangeable Ca2+… pred_Ca_lab_b &lt;- predict(Ca_lab_b, newdata = as.data.frame(vallayerb), control = gcntrl) sppredsvalb$Ca &lt;- pred_Ca_lab_b$pred$pred spvalb$R2[spvala$properties == &quot;Ca&quot;] &lt;- cor(vallayerb$Ca, sppredsvalb$Ca)^2 spvalb$RMSE[spvala$properties == &quot;Ca&quot;] &lt;- mean((vallayerb$Ca - sppredsvalb$Ca)^2)^0.5 spvalb$ME[spvala$properties == &quot;Ca&quot;] &lt;- mean(vallayerb$Ca - sppredsvalb$Ca) Estimation of clay, silt and sand contents from the predictions of \\(alr(clay)\\) and \\(alr(silt)\\)… ## predict alr(clay) pred_alr_Clay_lab_b &lt;- predict(alr_Clay_lab_b, newdata = as.data.frame(vallayerb), control = gcntrl) ## predict alr(silt) pred_alr_Silt_lab_b &lt;- predict(alr_Silt_lab_b, newdata = as.data.frame(vallayerb), control = gcntrl) ## Back-transfrom to clay, silt and sand contents dvr.Silt &lt;- exp(pred_alr_Silt_lab_b$pred$pred + (0.5 * (pred_alr_Silt_lab_b$pred$var.target - pred_alr_Silt_lab_b$pred$cov.pred.target))) dvr.Clay &lt;- exp(pred_alr_Clay_lab_b$pred$pred + (0.5 * (pred_alr_Clay_lab_b$pred$var.target - pred_alr_Clay_lab_b$pred$cov.pred.target))) dvn.pred &lt;- 1 + dvr.Silt + dvr.Clay ## Store the back-transformed values sppredsvalb$Clay &lt;- 100 * (dvr.Clay/dvn.pred) sppredsvalb$Silt &lt;- 100 * (dvr.Silt/dvn.pred) sppredsvalb$Sand &lt;- 100/dvn.pred ## Estimate the validation parameters for ## Clay spvalb$R2[spvala$properties == &quot;Clay&quot;] &lt;- cor(vallayerb$Clay, sppredsvalb$Clay)^2 spvalb$RMSE[spvala$properties == &quot;Clay&quot;] &lt;- mean((vallayerb$Clay - sppredsvalb$Clay)^2)^0.5 spvalb$ME[spvala$properties == &quot;Clay&quot;] &lt;- mean(vallayerb$Clay - sppredsvalb$Clay) ## Silt spvalb$R2[spvala$properties == &quot;Silt&quot;] &lt;- cor(vallayerb$Silt, sppredsvalb$Silt)^2 spvalb$RMSE[spvala$properties == &quot;Silt&quot;] &lt;- mean((vallayerb$Silt - sppredsvalb$Silt)^2)^0.5 spvalb$ME[spvala$properties == &quot;Silt&quot;] &lt;- mean(vallayerb$Silt - sppredsvalb$Silt) ## Sand spvalb$R2[spvala$properties == &quot;Sand&quot;] &lt;- cor(vallayerb$Sand, sppredsvalb$Sand)^2 spvalb$RMSE[spvala$properties == &quot;Sand&quot;] &lt;- mean((vallayerb$Sand - sppredsvalb$Sand)^2)^0.5 spvalb$ME[spvala$properties == &quot;Sand&quot;] &lt;- mean(vallayerb$Sand - sppredsvalb$Sand) 9.3.2 Vis-NIR augmented-based data Here, for the spatial predictions in the vis-NIR augmented dataset we use the variogram parameters which include the residual variances of the vis-NIR models. For this we use the paramargument of the predict function in the georob pacakge. #### Layer A Exchangeable Ca2+… pred_Ca_spec_a &lt;- predict(Ca_spec_a, newdata = as.data.frame(vallayera), control = gcntrl, param = unlist(variogtablea[variogtablea$properties == &quot;Ca_spec&quot;, varparamames])) sppredsvala$Ca_spec &lt;- pred_Ca_spec_a$pred$pred spvala$R2[spvala$properties == &quot;Ca_spec&quot;] &lt;- cor(vallayera$Ca, sppredsvala$Ca_spec)^2 spvala$RMSE[spvala$properties == &quot;Ca_spec&quot;] &lt;- mean((vallayera$Ca - sppredsvala$Ca_spec)^2)^0.5 spvala$ME[spvala$properties == &quot;Ca_spec&quot;] &lt;- mean(vallayera$Ca - sppredsvala$Ca_spec) Estimation of clay, silt and sand contents from the predictions of \\(alr(clay)\\) and \\(alr(silt)\\)… ## predict alr(clay) pred_alr_Clay_spec_a &lt;- predict(alr_Clay_spec_a, newdata = as.data.frame(vallayera), control = gcntrl, param = unlist(variogtablea[variogtablea$properties == &quot;alr_Clay_spec&quot;, varparamames])) ## predict alr(silt) pred_alr_Silt_spec_a &lt;- predict(alr_Silt_spec_a, newdata = as.data.frame(vallayera), control = gcntrl, param = unlist(variogtablea[variogtablea$properties == &quot;alr_Silt_spec&quot;, varparamames])) ## Back-transfrom to clay, silt and sand contents dvr.Silt &lt;- exp(pred_alr_Silt_spec_a$pred$pred + (0.5 * (pred_alr_Silt_spec_a$pred$var.target - pred_alr_Silt_spec_a$pred$cov.pred.target))) dvr.Clay &lt;- exp(pred_alr_Clay_spec_a$pred$pred + (0.5 * (pred_alr_Clay_spec_a$pred$var.target - pred_alr_Clay_spec_a$pred$cov.pred.target))) dvn.pred &lt;- 1 + dvr.Silt + dvr.Clay ## Store the back-transformed values sppredsvala$Clay_spec &lt;- 100 * (dvr.Clay/dvn.pred) sppredsvala$Silt_spec &lt;- 100 * (dvr.Silt/dvn.pred) sppredsvala$Sand_spec &lt;- 100/dvn.pred ## Estimate the validation parameters for ## Clay spvala$R2[spvala$properties == &quot;Clay_spec&quot;] &lt;- cor(vallayera$Clay, sppredsvala$Clay_spec)^2 spvala$RMSE[spvala$properties == &quot;Clay_spec&quot;] &lt;- mean((vallayera$Clay - sppredsvala$Clay_spec)^2)^0.5 spvala$ME[spvala$properties == &quot;Clay_spec&quot;] &lt;- mean(vallayera$Clay - sppredsvala$Clay_spec) ## Silt spvala$R2[spvala$properties == &quot;Silt_spec&quot;] &lt;- cor(vallayera$Silt, sppredsvala$Silt_spec)^2 spvala$RMSE[spvala$properties == &quot;Silt_spec&quot;] &lt;- mean((vallayera$Silt - sppredsvala$Silt_spec)^2)^0.5 spvala$ME[spvala$properties == &quot;Silt_spec&quot;] &lt;- mean(vallayera$Silt - sppredsvala$Silt_spec) ## Sand spvala$R2[spvala$properties == &quot;Sand_spec&quot;] &lt;- cor(vallayera$Sand, sppredsvala$Sand_spec)^2 spvala$RMSE[spvala$properties == &quot;Sand_spec&quot;] &lt;- mean((vallayera$Sand - sppredsvala$Sand_spec)^2)^0.5 spvala$ME[spvala$properties == &quot;Sand_spec&quot;] &lt;- mean(vallayera$Sand - sppredsvala$Sand_spec) 9.3.2.1 Layer B Exchangeable Ca2+… pred_Ca_spec_b &lt;- predict(Ca_spec_b, newdata = as.data.frame(vallayerb), control = gcntrl, param = unlist(variogtableb[variogtableb$properties == &quot;Ca_spec&quot;, varparamames])) sppredsvalb$Ca_spec &lt;- pred_Ca_spec_b$pred$pred spvalb$R2[spvala$properties == &quot;Ca_spec&quot;] &lt;- cor(vallayerb$Ca, sppredsvalb$Ca_spec)^2 spvalb$RMSE[spvala$properties == &quot;Ca_spec&quot;] &lt;- mean((vallayerb$Ca - sppredsvalb$Ca_spec)^2)^0.5 spvalb$ME[spvala$properties == &quot;Ca_spec&quot;] &lt;- mean(vallayerb$Ca - sppredsvalb$Ca_spec) Estimation of clay, silt and sand contents from the predictions of \\(alr(clay)\\) and \\(alr(silt)\\)… ## predict alr(clay) pred_alr_Clay_spec_b &lt;- predict(alr_Clay_spec_b, newdata = as.data.frame(vallayerb), control = gcntrl, param = unlist(variogtableb[variogtableb$properties == &quot;alr_Clay_spec&quot;, varparamames])) ## predict alr(silt) pred_alr_Silt_spec_b &lt;- predict(alr_Silt_spec_b, newdata = as.data.frame(vallayerb), control = gcntrl, param = unlist(variogtableb[variogtableb$properties == &quot;alr_Silt_spec&quot;, varparamames])) ## Back-transfrom to clay, silt and sand contents dvr.Silt &lt;- exp(pred_alr_Silt_spec_b$pred$pred + (0.5 * (pred_alr_Silt_spec_b$pred$var.target - pred_alr_Silt_spec_b$pred$cov.pred.target))) dvr.Clay &lt;- exp(pred_alr_Clay_spec_b$pred$pred + (0.5 * (pred_alr_Clay_spec_b$pred$var.target - pred_alr_Clay_spec_b$pred$cov.pred.target))) dvn.pred &lt;- 1 + dvr.Silt + dvr.Clay ## Store the back-transformed values sppredsvalb$Clay_spec &lt;- 100 * (dvr.Clay/dvn.pred) sppredsvalb$Silt_spec &lt;- 100 * (dvr.Silt/dvn.pred) sppredsvalb$Sand_spec &lt;- 100/dvn.pred ## Estimate the validation parameters for ## Clay spvalb$R2[spvala$properties == &quot;Clay_spec&quot;] &lt;- cor(vallayerb$Clay, sppredsvalb$Clay_spec)^2 spvalb$RMSE[spvala$properties == &quot;Clay_spec&quot;] &lt;- mean((vallayerb$Clay - sppredsvalb$Clay_spec)^2)^0.5 spvalb$ME[spvala$properties == &quot;Clay_spec&quot;] &lt;- mean(vallayerb$Clay - sppredsvalb$Clay_spec) ## Silt spvalb$R2[spvala$properties == &quot;Silt_spec&quot;] &lt;- cor(vallayerb$Silt, sppredsvalb$Silt_spec)^2 spvalb$RMSE[spvala$properties == &quot;Silt_spec&quot;] &lt;- mean((vallayerb$Silt - sppredsvalb$Silt_spec)^2)^0.5 spvalb$ME[spvala$properties == &quot;Silt_spec&quot;] &lt;- mean(vallayerb$Silt - sppredsvalb$Silt_spec) ## Sand spvalb$R2[spvala$properties == &quot;Sand_spec&quot;] &lt;- cor(vallayerb$Sand, sppredsvalb$Sand_spec)^2 spvalb$RMSE[spvala$properties == &quot;Sand_spec&quot;] &lt;- mean((vallayerb$Sand - sppredsvalb$Sand_spec)^2)^0.5 spvalb$ME[spvala$properties == &quot;Sand_spec&quot;] &lt;- mean(vallayerb$Sand - sppredsvalb$Sand_spec) 9.4 Mapping Now that we have validated the spatial models for both laboratory data and vis-NIR augmented data, we proceed to produce the maps of each property at each layer. First we have to read the polygon corresponding to the study area. Download the polygon to your working directory. This is a R object of class (SpatialPolygonsDataFrame of the package sp) which contains the polygon of the study area. Click here to download it. If you saved the file in your working directory you can: polyfile &lt;- file(&quot;polygon.rds&quot;) shape &lt;- readRDS(polyfile) shape or… polyfile &lt;- file(&quot;https://github.com/l-ramirez-lopez/VNIR_spectroscopy_for_robust_soil_mapping/raw/master/polygon.rds&quot;) shape &lt;- readRDS(polyfile) shape Now create a template for the spatial predictions ## function to convert polygon to raster pol2raster &lt;-function(r, nrows = 10, ncols = 10){ ext&lt;-raster(extent(r), nrows, ncols) crs(ext) &lt;- crs(r) fr &lt;- rasterize(r, ext, field = 1, update = TRUE) return(fr) } rncol &lt;- (extent(shape)@ymax - extent(shape)@ymin)/10 rnrow &lt;- (extent(shape)@xmax - extent(shape)@xmin)/10 rasg &lt;- pol2raster(shape, rncol, rnrow) ## resolution ## here you can choose the resolution for the predicted maps ## for our paper we set this value to 10, however here we ## will set it to 50 for the sake of memory ## if you have a decent machine you can go finer mresolution &lt;- 50 rasg &lt;- raster::resample(rasg, raster(resolution = mresolution, ext = extent(shape)), method=&quot;ngb&quot;) rasg plot(rasg) ## and here we have our template sppx &lt;- as(rasg, &quot;SpatialPixelsDataFrame&quot;) colnames(sppx@coords) &lt;- c(&quot;POINT_X&quot;, &quot;POINT_Y&quot;) Create a data.frame for each layer to store the predicted values for the maps spatialpredsa &lt;- data.frame(matrix(NA, nrow(sppx), length(bprops))) colnames(spatialpredsa) &lt;- bprops spatialpredsb &lt;- spatialpredsa 9.4.1 Laboratory-based data 9.4.1.1 Layer A Exchangeable Ca2+… spatialpredsa$Ca &lt;- predict(Ca_lab_a, newdata = sppx)$pred Clay, sand and silt contents.. alr_Clay_lab_a_map &lt;- predict(alr_Clay_lab_a, newdata = sppx) alr_Silt_lab_a_map &lt;- predict(alr_Silt_lab_a, newdata = sppx) spatialpredsa$Clay &lt;- 100 * exp(alr_Clay_lab_a_map$pred)/(1 + exp(alr_Silt_lab_a_map$pred) + exp(alr_Clay_lab_a_map$pred)) spatialpredsa$Silt &lt;- 100 * exp(alr_Silt_lab_a_map$pred)/(1 + exp(alr_Silt_lab_a_map$pred) + exp(alr_Clay_lab_a_map$pred)) spatialpredsa$Sand &lt;- 100/(1 + exp(alr_Silt_lab_a_map$pred) + exp(alr_Clay_lab_a_map$pred)) 9.4.1.2 Layer B Exchangeable Ca2+… spatialpredsb$Ca &lt;- predict(Ca_lab_b, newdata = sppx)$pred Clay, sand and silt contents.. alr_Clay_lab_b_map &lt;- predict(alr_Clay_lab_b, newdata = sppx) alr_Silt_lab_b_map &lt;- predict(alr_Silt_lab_b, sppx) spatialpredsb$Clay &lt;- 100 * exp(alr_Clay_lab_b_map$pred)/(1 + exp(alr_Silt_lab_b_map$pred) + exp(alr_Clay_lab_b_map$pred)) spatialpredsb$Silt &lt;- 100 * exp(alr_Silt_lab_b_map$pred)/(1 + exp(alr_Silt_lab_b_map$pred) + exp(alr_Clay_lab_b_map$pred)) spatialpredsb$Sand &lt;- 100/(1 + exp(alr_Silt_lab_b_map$pred) + exp(alr_Clay_lab_b_map$pred)) 9.4.2 Vis-NIR augmented-based data 9.4.2.1 Layer A Exchangeable Ca2+… spatialpredsa$Ca &lt;- predict(Ca_spec_a, newdata = sppx, param = unlist(variogtablea[variogtablea$properties == &quot;Ca_spec&quot;, varparamames]))$pred Clay, sand and silt contents.. alr_Clay_spec_a_map &lt;- predict(alr_Clay_spec_a, newdata = sppx, unlist(variogtablea[variogtablea$properties == &quot;alr_Silt_spec&quot;, varparamames])) alr_Silt_spec_a_map &lt;- predict(alr_Silt_spec_a, newdata = sppx, param = unlist(variogtablea[variogtablea$properties == &quot;alr_Clay_spec&quot;, varparamames])) spatialpredsa$Clay_spec &lt;- 100 * exp(alr_Clay_spec_a_map$pred)/(1 + exp(alr_Silt_spec_a_map$pred) + exp(alr_Clay_spec_a_map$pred)) spatialpredsa$Silt_spec &lt;- 100 * exp(alr_Silt_spec_a_map$pred)/(1 + exp(alr_Silt_spec_a_map$pred) + exp(alr_Clay_spec_a_map$pred)) spatialpredsa$Sand_spec &lt;- 100/(1 + exp(alr_Silt_spec_a_map$pred) + exp(alr_Clay_spec_a_map$pred)) 9.4.2.2 Layer B Exchangeable Ca2+… spatialpredsb$Ca_spec &lt;- predict(Ca_spec_b, newdata = sppx, param = unlist(variogtableb[variogtableb$properties == &quot;Ca_spec&quot;, varparamames]))$pred Clay, sand and silt contents.. alr_Clay_spec_b_map &lt;- predict(alr_Clay_spec_b, newdata = sppx, param = unlist(variogtableb[variogtableb$properties == &quot;alr_Silt_spec&quot;, varparamames])) alr_Silt_spec_b_map &lt;- predict(alr_Silt_spec_b, newdata = sppx, param = unlist(variogtableb[variogtableb$properties == &quot;alr_Clay_spec&quot;, varparamames])) spatialpredsb$Clay_spec &lt;- 100 * exp(alr_Clay_spec_b_map$pred)/(1 + exp(alr_Silt_spec_b_map$pred) + exp(alr_Clay_spec_b_map$pred)) spatialpredsb$Silt_spec &lt;- 100 * exp(alr_Silt_spec_b_map$pred)/(1 + exp(alr_Silt_spec_b_map$pred) + exp(alr_Clay_spec_b_map$pred)) spatialpredsb$Sand_spec &lt;- 100/(1 + exp(alr_Silt_spec_b_map$pred) + exp(alr_Clay_spec_b_map$pred)) 9.4.3 Plots ## compute the differences between maps (layer) spatialpredsa$Cadiff &lt;- spatialpredsa$Ca - spatialpredsa$Ca_spec spatialpredsa$Claydiff &lt;- spatialpredsa$Clay - spatialpredsa$Clay_spec spatialpredsa$Siltdiff &lt;- spatialpredsa$Silt - spatialpredsa$Silt_spec spatialpredsa$Sanddiff &lt;- spatialpredsa$Sand - spatialpredsa$Sand_spec ## compute the differences between maps (layer B) spatialpredsb$Cadiff &lt;- spatialpredsb$Ca - spatialpredsb$Ca_spec spatialpredsb$Claydiff &lt;- spatialpredsb$Clay - spatialpredsb$Clay_spec spatialpredsb$Siltdiff &lt;- spatialpredsb$Silt - spatialpredsb$Silt_spec spatialpredsb$Sanddiff &lt;- spatialpredsb$Sand - spatialpredsb$Sand_spec CReate a new data.frame for plotting purposes pred_layer_a &lt;- data.frame(rbind(sppx@coords, sppx@coords, sppx@coords), layer = &quot;Depth A (0 - 0.2 m)&quot;, method = c(rep(&quot;Laboratory-based&quot;, nrow(spatialpredsa)), rep(&quot;vis-NIR augmented&quot;,nrow(spatialpredsa)), rep(&quot;Differences between maps&quot;, nrow(spatialpredsa))), Ca = unlist(spatialpredsa[,c(&quot;Ca&quot;, &quot;Ca_spec&quot;, &quot;Cadiff&quot;)]), Clay = unlist(spatialpredsa[,c(&quot;Clay&quot;, &quot;Clay_spec&quot;, &quot;Claydiff&quot;)]), Silt = unlist(spatialpredsa[,c(&quot;Silt&quot;, &quot;Silt_spec&quot;, &quot;Siltdiff&quot;)]), Sand = unlist(spatialpredsa[,c(&quot;Sand&quot;, &quot;Sand_spec&quot;, &quot;Sanddiff&quot;)])) pred_layer_b &lt;- data.frame(rbind(sppx@coords, sppx@coords, sppx@coords), layer = &quot;Depth B (0.8 - 1.0 m)&quot;, method = c(rep(&quot;Laboratory-based&quot;, nrow(spatialpredsb)), rep(&quot;vis-NIR augmented&quot;,nrow(spatialpredsb)), rep(&quot;Differences between maps&quot;, nrow(spatialpredsb))), Ca = unlist(spatialpredsb[,c(&quot;Ca&quot;, &quot;Ca_spec&quot;, &quot;Cadiff&quot;)]), Clay = unlist(spatialpredsb[,c(&quot;Clay&quot;, &quot;Clay_spec&quot;, &quot;Claydiff&quot;)]), Silt = unlist(spatialpredsb[,c(&quot;Silt&quot;, &quot;Silt_spec&quot;, &quot;Siltdiff&quot;)]), Sand = unlist(spatialpredsb[,c(&quot;Sand&quot;, &quot;Sand_spec&quot;, &quot;Sanddiff&quot;)])) finalmapping &lt;- data.frame(rbind(pred_layer_a, pred_layer_b)) Define palette of color for the plot myPalette &lt;- colorRampPalette(rev(brewer.pal(11, &quot;Spectral&quot;)), space = &quot;Lab&quot;) Define some ggplot parameters common to all plots gfg &lt;- facet_grid(layer ~ method) gscf &lt;- scale_fill_gradientn(colours = myPalette(30)) gcoord &lt;- coord_equal() gtheme &lt;- theme_bw() + theme(legend.position = &quot;top&quot;) + theme(axis.title.y = element_text( colour = grey(0.2), size=25), axis.text.y = element_text(angle=0, vjust =0.5, hjust =0.5, size=16), legend.title = element_text( colour = &quot;black&quot;, size=25)) + theme(axis.title.x = element_text( colour = grey(0.2), size=25), axis.text.x = element_text(angle = 0, vjust=0, size=16)) + theme(legend.text = element_text( colour = grey(0.2), size=15), legend.key.size = unit(0.95, &quot;cm&quot;)) + theme(strip.background = element_rect(fill = &quot;grey&quot;), strip.text.x = element_text( size = 25, colour = &quot;black&quot;, angle = 0), strip.text.y = element_text( size = 25, colour = &quot;black&quot;, angle = -90)) glabs &lt;- labs(y = &quot;Northings /m&quot;, x = &quot;Eastings /m&quot;) Define palette of color for the plot Create the maps for Ca2+ ca_map &lt;- ggplot(finalmapping[finalmapping$method != &quot;Differences between maps&quot;,], aes(POINT_X, POINT_Y)) + geom_tile(aes(fill = Ca)) + gfg + gscf + gcoord + gtheme + glabs + guides(fill = guide_colourbar(title = expression(paste(&quot;&quot;, Ca^&quot;++&quot;, &quot; &quot; /mmol[c], kg^-1, &quot; &quot;)))) ca_map_diff &lt;- ggplot(finalmapping[finalmapping$method == &quot;Differences between maps&quot;,], aes(POINT_X, POINT_Y)) + geom_tile(aes(fill = Ca)) + gfg + gscf + gcoord + gtheme + glabs + guides(fill = guide_colourbar(title = expression(paste(&quot;Difference&quot;, &quot; &quot; /mmol[c], kg^-1, &quot; &quot;)))) ca_map ca_map_diff Create the maps for \\(Clay\\) Clay_map &lt;- ggplot(finalmapping[finalmapping$method != &quot;Differences between maps&quot;,], aes(POINT_X, POINT_Y)) + geom_tile(aes(fill = Clay)) + gfg + gscf + gcoord + gtheme + glabs + guides(fill = guide_colourbar(title = &quot;Clay content, % &quot;)) Clay_map_diff &lt;- ggplot(finalmapping[finalmapping$method == &quot;Differences between maps&quot;,], aes(POINT_X, POINT_Y)) + geom_tile(aes(fill = Clay)) + gfg + gscf + gcoord + gtheme + glabs + guides(fill = guide_colourbar(title = &quot;Difference, %&quot;)) Clay_map Clay_map_diff Create the maps for \\(Silt\\) Silt_map &lt;- ggplot(finalmapping[finalmapping$method != &quot;Differences between maps&quot;,], aes(POINT_X, POINT_Y)) + geom_tile(aes(fill = Silt)) + gfg + gscf + gcoord + gtheme + glabs + guides(fill = guide_colourbar(title = &quot;Silt content, % &quot;)) Silt_map_diff &lt;- ggplot(finalmapping[finalmapping$method == &quot;Differences between maps&quot;,], aes(POINT_X, POINT_Y)) + geom_tile(aes(fill = Silt)) + gfg + gscf + gcoord + gtheme + glabs + guides(fill = guide_colourbar(title = &quot;Difference, %&quot;)) Silt_map Silt_map_diff Create the maps for \\(Sand\\) Sand_map &lt;- ggplot(finalmapping[finalmapping$method != &quot;Differences between maps&quot;,], aes(POINT_X, POINT_Y)) + geom_tile(aes(fill = Sand)) + gfg + gscf + gcoord + gtheme + glabs + guides(fill = guide_colourbar(title = &quot;Sand content, % &quot;)) Sand_map_diff &lt;- ggplot(finalmapping[finalmapping$method == &quot;Differences between maps&quot;,], aes(POINT_X, POINT_Y)) + geom_tile(aes(fill = Sand)) + gfg + gscf + gcoord + gtheme + glabs + guides(fill = guide_colourbar(title = &quot;Difference, %&quot;)) Sand_map Sand_map_diff "]
]
